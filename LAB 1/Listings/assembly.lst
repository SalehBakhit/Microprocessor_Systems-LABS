


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           IIR_asm
    3 00000000         
    4 00000000         ;y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n
                       -1] + a2 * y[n-2]
    5 00000000         ;R0 = pIn
    6 00000000         ;R1 = pOut
    7 00000000         ;R2 = pCoeffs
    8 00000000         ;R3 = length
    9 00000000         ;R4 = counter
   10 00000000         ;S5 is used for coeffs
   11 00000000         IIR_asm
   12 00000000 2B00            CMP              R3, #0
   13 00000002 D031            BEQ              endProg
   14 00000004         
   15 00000004 F04F 0400       MOV              R4, #0      ;init counter to 0
   16 00000008         
   17 00000008         ;init states
   18 00000008 ED9F 0A18       VLDR.F32         S0, =0.0    ;x[n-1]
   19 0000000C EDDF 0A17       VLDR.F32         S1, =0.0    ;x[n-2]
   20 00000010 ED9F 1A16       VLDR.F32         S2, =0.0    ;y[n-1]
   21 00000014 EDDF 1A15       VLDR.F32         S3, =0.0    ;y[n-2]
   22 00000018         
   23 00000018         loop
   24 00000018         ;calc
   25 00000018 ED90 2A00       VLDR             S4, [R0]    ;x[n]
   26 0000001C EDD2 2A00       VLDR             S5, [R2]    ;b0
   27 00000020 EE22 2A22       VMUL.F32         S4, S4, S5  ;S4 = x[n]*b0
   28 00000024         
   29 00000024 EDD2 2A01       VLDR             S5, [R2, #4] ;b1
   30 00000028 EE02 2A80       VMLA.F32         S4, S5, S0  ;S4 = x[n]*b0 + x[n
                                                            -1]*b1
   31 0000002C         
   32 0000002C EDD2 2A02       VLDR             S5, [R2, #8] ;b2
   33 00000030 EE02 2AA0       VMLA.F32         S4, S5, S1  ;S4 = x[n]*b0 + x[n
                                                            -1]*b1 + x[n-2]*b2
   34 00000034         
   35 00000034 EDD2 2A03       VLDR             S5, [R2, #12] ;a1
   36 00000038 EE02 2A81       VMLA.F32         S4, S5, S2  ;S4 = x[n]*b0 + x[n
                                                            -1]*b1 + x[n-2]*b2 
                                                            + y[n-1]*a1
   37 0000003C         
   38 0000003C EDD2 2A04       VLDR             S5, [R2, #16] ;a2
   39 00000040 EE02 2AA1       VMLA.F32         S4, S5, S3  ;S4 = x[n]*b0 + x[n
                                                            -1]*b1 + x[n-2]*b2 
                                                            + y[n-1]*a1 + y[n-2
                                                            ]*a2 ==> y[n]
   40 00000044         
   41 00000044 ED81 2A00       VSTR             S4, [R1]    ;save output, y[n] 
                                                            = S4
   42 00000048         
   43 00000048         
   44 00000048         ;update states
   45 00000048 EEF0 0A40       VMOV.F32         S1, S0      ;S1 = S0 ==> x[n-2]
                                                             = x[n-1]
   46 0000004C EEF0 1A41       VMOV.F32         S3, S2      ;S3 = S2 ==> y[n-2]
                                                             = y[n-1]
   47 00000050 EEB0 1A42       VMOV.F32         S2, S4      ;S2 = S4 ==> y[n-1]
                                                             = y[n]



ARM Macro Assembler    Page 2 


   48 00000054 ED90 0A00       VLDR             S0, [R0]    ;S0 = x[n-1]
   49 00000058         
   50 00000058         
   51 00000058         ;increment and check
   52 00000058 F100 0004       ADD              R0, R0, #4  ;change pointer to 
                                                            next x[n] correspon
                                                            ding to the next y[
                                                            n]
   53 0000005C F101 0104       ADD              R1, R1, #4  ;change pointer to 
                                                            next y[n]
   54 00000060 F104 0401       ADD              R4, R4, #1  ;increment counter
   55 00000064         
   56 00000064 429C            CMP              R4, R3      ;while(counter != l
                                                            ength)
   57 00000066 D1D7            BNE              loop        ;loop
   58 00000068         
   59 00000068         endProg
   60 00000068 4770            BX               LR          ;
   61 0000006A                 END
              00 00 00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\assembly.d -o.\objects\assembly.o -I.\RTE\_Lab_1 -IC:
\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM3
2F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EVAL 
SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --p
redefine="STM32F407xx SETA 1" --list=.\listings\assembly.lst Sources\Assembly.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

IIR_asm 00000000

Symbol: IIR_asm
   Definitions
      At line 11 in file Sources\Assembly.s
   Uses
      At line 2 in file Sources\Assembly.s
Comment: IIR_asm used once
endProg 00000068

Symbol: endProg
   Definitions
      At line 59 in file Sources\Assembly.s
   Uses
      At line 13 in file Sources\Assembly.s
Comment: endProg used once
loop 00000018

Symbol: loop
   Definitions
      At line 23 in file Sources\Assembly.s
   Uses
      At line 57 in file Sources\Assembly.s
Comment: loop used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file Sources\Assembly.s
   Uses
      None
Comment: text unused
4 symbols
341 symbols in table
